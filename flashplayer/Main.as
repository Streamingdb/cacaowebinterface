package {	import flash.events.*;	import flash.external.*;	import flash.utils.*;	import flash.display.MovieClip;    import flash.ui.Mouse;	import flash.events.MouseEvent;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.media.Sound;	import flash.net.*;	import flash.filters.*;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.display.Sprite;	import flash.display.LoaderInfo;	import flash.system.Capabilities;	import flash.geom.*;    import flash.ui.ContextMenu;    import flash.ui.ContextMenuItem;    import flash.ui.ContextMenuBuiltInItems;    import flash.events.ContextMenuEvent;	import flash.media.SoundTransform;	import flash.xml.XMLDocument;	import flash.media.Video;	import flash.system.System;	import fl.motion.AdjustColor;	import flash.desktop.Clipboard; 	import flash.desktop.ClipboardFormats; 	import org.fasex.preloader.LightRayMultiColorSlow;	public class Main extends Sprite {				private static var playerversion = "1.01";				private static var _main:Main = null;				public var myClassicVideo:Video = null;				public var myvideo:Video;		public var controls:MovieClip;		public var linksbutton:MovieClip;		public var mylinksbox:MovieClip;						var mainVideoClient:Object;		var nc:NetConnection;		var ns:NetStream;		var ncad:NetConnection;		var nsad:NetStream;				private var videohandler:VideoHandler = null;				var mypreloader:LightRayMultiColorSlow;		var subtitlesTextField1:TextField;		var subtitlesTextField:TextField;			var mouseactivity = true;		var controlshidden = false;		var playstatus = "";		var duration:Number = 0;		var totalduration:Number = 0;		var checkcacaowebTimer:Timer = new Timer(5000);		var checkvideoTimeoutTimer:Timer = new Timer(10000);		var videoTimer:Timer = new Timer(500);		var activityTimer:Timer = new Timer(2000);		var startedSuccessfully = false;		var ishostingservice = false;		var hostingprovider = "";		var isfilestreaming = false;		var ishttpstreaming = false;		var subtitles:SubtitlesLoader = new SubtitlesLoader();		var currentsubtitleslanguage:String = "";		var languagestrings:LanguageStrings = new LanguageStrings();		var language = 'en';		var timeoffset:Number = 0;		var playbackstarted:Boolean = false; // dit si ns.play a été appelée au moins une fois		var metadatareceived = false;		var lastbytesLoaded:Number = 0; // for bandwidth calculation		var cacaowebinstalled = false;		var statsstopsent = false; // pour que ce ne soit envoye qu'une seule fois par instance de lecture 		var videoid = "";		var urlofvideo = "";		var videotitle = "";		var videotimes = null; // donne la correspondance time -> position pour les videos flv		var videopositions = null; // donne la correspondance time -> position pour les videos flv		var showingad = false;		var restricted = false;		var previewallowed = false;		var mybtn:MovieClip = null;		//var logo:Bitmap = null;		var javascriptcom:JavascriptCallbacks = null;  		var dontplay = 0;		var affiliate = null;		var affiliate1 = null;		var affiliate2 = null;				var myerrormsg:TextField;		var newFormat:TextFormat;		var labelFilters:Array;				public static var currentlogdata:String = "";		public function Main() {			Main._main = this;						log("player version: " + Main.playerversion);			log(Capabilities.playerType + " (" + Capabilities.version + ")" + " - " + Capabilities.language);						javascriptcom = new JavascriptCallbacks();						myClassicVideo = myvideo;						mainVideoClient = new Object();			mainVideoClient.onMetaData = metaDataHandler;			mainVideoClient.onCuePoint = cuePointHandler;						nc = new NetConnection();			nc.connect(null);						ns = new NetStream(nc);			ns.client = mainVideoClient;			ns.bufferTime = 2;						ncad = new NetConnection();			ncad.connect(null);						nsad = new NetStream(ncad);			nsad.client = new Object();			nsad.bufferTime = 2;									subtitlesTextField1 = new TextField();			subtitlesTextField = new TextField();			newFormat = new TextFormat();						newFormat.size = 20;			newFormat.bold = true;									var labelGlow:GlowFilter = new GlowFilter(0x000000, 1.0);			labelFilters = [labelGlow];						subtitlesTextField.setTextFormat(newFormat);			subtitlesTextField.background = false;			subtitlesTextField.multiline = true;			subtitlesTextField.antiAliasType = flash.text.AntiAliasType.ADVANCED;			subtitlesTextField.textColor = 0xEEEEEE;			subtitlesTextField.autoSize = TextFieldAutoSize.CENTER;									myerrormsg = new TextField();						var format:TextFormat = new TextFormat();			//format.font = "Font 2";			format.bold = true;			format.size = 18;			format.kerning = true;						myerrormsg.background = false;			myerrormsg.multiline = true;			myerrormsg.antiAliasType = flash.text.AntiAliasType.ADVANCED;			myerrormsg.textColor = 0x999999;			myerrormsg.autoSize = TextFieldAutoSize.CENTER;			myerrormsg.defaultTextFormat = format;											mypreloader = new LightRayMultiColorSlow();			mypreloader.x = stage.stageWidth / 2 - 20;			mypreloader.y = stage.stageHeight / 2 - 20;			mypreloader.scaleX = 0.7;			mypreloader.scaleY = 0.7;			mypreloader.build();									/** context menu */			try {				var menuItem1:ContextMenuItem = new ContextMenuItem("Copy debug info");				menuItem1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deb);				var myMenu:ContextMenu = new ContextMenu();				myMenu.hideBuiltInItems();				myMenu.customItems.push(menuItem1);				this.contextMenu = myMenu;				function deb(e:ContextMenuEvent) {					Clipboard.generalClipboard.clear(); 					if (currentlogdata != null) 						Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, currentlogdata, false);				}			} catch(e:Error) {				log("error with ContextMenu");			}										mainstart(); // calls the main function		}				public static function getInstance():Main {			return (_main);		}		public static function getStage():Stage {			return (_main.stage);		}				public static function log(s:String) {			currentlogdata += "\n" + s;			trace(s);		}				// this function exists solely to prevent VerifyError at runtime when stagevideo is not		// present in earlier versions of flash		function stagevideoChangeNetStream(newstream) {			this.videohandler.changeCurrentStream(newstream);		}				function changeNetStream(newstream:NetStream) {			trace("changing netstream, videohandler = " + this.videohandler);			if (this.videohandler != null) { 				trace("using stagevideo in changing netstream");				stagevideoChangeNetStream(newstream);			} else {				trace("error in stagevideo in changing netstream");				this.myClassicVideo.attachNetStream(newstream);			}		}				function errorMessage(msg) {			ns.pause();			showErrorMessage(msg);		}				function clearSubtitles() {			subtitles.clearSubtitles();			this.currentsubtitleslanguage = "";			if (this.contains(subtitlesTextField))				this.addChild(subtitlesTextField);		}		function setSubtitles(subtitlesurl:String, subtitleslanguage:String = "en", subtitlesoffset:Number = 0.0) {			log("loading subtitles for language " + subtitleslanguage);			subtitles.loadSubtitle(subtitlesurl, subtitleslanguage, subtitlesoffset);			this.currentsubtitleslanguage = subtitleslanguage;			this.addChild(subtitlesTextField);			fitSubtitlesToVideoSize();		}						function formattime(timespan:Number):String {			var durationSecs:Number = Math.floor(timespan);			var durationMins:Number = Math.floor(durationSecs / 60);			durationSecs %= 60;			var durSecsDisplay:String = "";			var durMinsDisplay:String = "";			if (durationMins < 10){				durMinsDisplay = "0" + durationMins;			} else {				durMinsDisplay = "" + durationMins;			}			if (durationSecs < 10){				durSecsDisplay = "0" + durationSecs;			} else {				durSecsDisplay = "" + durationSecs;			}			return (durMinsDisplay + ":" + durSecsDisplay);		}		function togglepauseplay() {			if (playstatus == "Play") {				controls.playbutton.gotoAndStop(1);				playstatus = "Pause";				ns.pause();			} else {				controls.playbutton.gotoAndStop(10);				playstatus = "Play";				ns.resume();			}		}		function fitSubtitlesToVideoSize() {			var mytxt = subtitlesTextField.htmlText;			subtitlesTextField.htmlText = "";			subtitlesTextField.x = stage.stageWidth * 0.5;			subtitlesTextField.y = 0.8 * stage.stageHeight;			subtitlesTextField.htmlText = mytxt;		}		function togglefullscreen() {			if(stage.displayState == StageDisplayState.NORMAL) {				stage.displayState = StageDisplayState.FULL_SCREEN;			} else {				stage.displayState = StageDisplayState.NORMAL;			}		}		function removeLoader() {			if (this.mypreloader != null && this.contains(this.mypreloader))				this.removeChild(mypreloader);			removeEventListener(Event.ENTER_FRAME, checkPreloader);		}		function addLoader() {			if (!(this.contains(mypreloader))) {				this.addChild(mypreloader);				addEventListener(Event.ENTER_FRAME, checkPreloader);			}		}		function showErrorMessage(msg:String) {			removeLoader();			myerrormsg.htmlText = "";			myerrormsg.x = stage.stageWidth * 0.5;			myerrormsg.y = stage.stageHeight * 0.3;			myerrormsg.htmlText = msg;			if (! (this.contains(myerrormsg))) {				this.addChild(myerrormsg);			}			myerrormsg.filters = labelFilters;		}		function removeErrorMessage() {			if (this.contains(myerrormsg)) {				this.removeChild(myerrormsg);			}		}								/**			fonctions appelées régulièrement pendant la lecture de la vidéo pour tester l'activité souris ou le countdown		 */		 		/** updates the progressbar, bufferingbar and timer text */		function videoStatus(e:TimerEvent) {			var amountLoaded = ns.bytesLoaded / ns.bytesTotal;			if (totalduration == 0)				controls.mytimeline.myloadbar.width = amountLoaded * (controls.mytimeline.myloadbarfull.width - 10)			else				controls.mytimeline.myloadbar.width = ((controls.mytimeline.myloadbarfull.width - 10) - (controls.mytimeline.myloadbar.x + 176)) * amountLoaded;						controls.mytimetext.text = formattime(ns.time + timeoffset);			if (!startedSuccessfully && ishttpstreaming && ns.bytesLoaded > 0) {				lastbytesLoaded = ns.bytesLoaded;			}			if (startedSuccessfully && totalduration > 0) {				controls.mytimeline.myprogressbar.width = Math.floor(((ns.time + timeoffset) / totalduration) * 									(controls.mytimeline.myloadbarfull.width - 10)) - (controls.mytimeline.myprogressbar.x + 176);			}			if (subtitles.isLanguageSubtitleActive(currentsubtitleslanguage)) {				subtitlesTextField.htmlText = subtitles.getCurrent(currentsubtitleslanguage, ns.time);				subtitlesTextField.setTextFormat(newFormat);				if (subtitlesTextField.numLines == 1) {					subtitlesTextField.y = 0.9 * stage.stageHeight;				} else {					subtitlesTextField.y = 0.8 * stage.stageHeight;				}				subtitlesTextField.filters = labelFilters;			}		}		function checkPreloader(e:Event) {			var ratio:Number = Math.floor(ns.bufferLength / ns.bufferTime * 100);			if (ratio > 100) { ratio = 100 };			mypreloader.percent = ratio;		}		function activityStatus(e:TimerEvent) {			if (!mouseactivity /*&& stage.displayState == StageDisplayState.FULL_SCREEN*/) {				if (!controlshidden) {					Mouse.hide();					TransitionManager.start(controls, {type:Fade, direction:Transition.OUT, duration:1, easing:Strong.easeOut});					TransitionManager.start(linksbutton, {type:Fade, direction:Transition.OUT, duration:1, easing:Strong.easeOut});					controlshidden = true;				}			} 			mouseactivity = false;		}						/** 		 *	Events Handlers		 */		function keyDownHandler(e:KeyboardEvent) {			if (e.keyCode == 32) { // barre d'espace				togglepauseplay();			}		}				function onclickplay(eventObject:MouseEvent) {			if (!playbackstarted) { 				startplaying();			} else {				togglepauseplay();				if (playstatus == "Play") {					if (mybtn != null && this.contains(mybtn))						this.removeChild(mybtn);					removeErrorMessage();					if (ns.bufferLength < ns.bufferTime) {						addLoader();					}				}			}		}		function onvideomouseclick(eventObject:MouseEvent) {			if(stage.displayState == StageDisplayState.FULL_SCREEN && eventObject.stageY < 320) {				togglefullscreen();			} else if (mylinksbox.visible) {				mylinksbox.visible = false;				playstatus = "Play";				ns.resume();				controls.playbutton.gotoAndStop(10);			}		}		function onclickfullscreen(eventObject:MouseEvent) {			togglefullscreen();		}		function onmousedoubleclick(eventObject:MouseEvent) {			togglefullscreen();		}		function ontimelinemove(eventObject:MouseEvent) {			controls.mytimelinetext.visible = true;			controls.mytimelinetext.text = formattime(Math.floor(((eventObject.stageX - 40) / (controls.mytimeline.width - 10)) * totalduration));			controls.mytimelinetext.x = eventObject.stageX - (controls.mytimeline.myloadbarfull.width - 10) - 15;		}		function ontimelinerollout(eventObject:MouseEvent) {			controls.mytimelinetext.visible = false;		}		function onplayrollover(eventObject:MouseEvent) {			if (playstatus == "Pause") {				controls.playbutton.gotoAndStop(5);				var myTween1:Tween = new Tween(controls.playbutton, "scaleX", Elastic.easeOut, 1, 1.1, 1, true);				var myTween2:Tween = new Tween(controls.playbutton, "scaleY", Elastic.easeOut, 1, 1.1, 1, true);			}		}		function onplayrollout(eventObject:MouseEvent) {			if (playstatus == "Pause") {				var myTween1:Tween = new Tween(controls.playbutton, "scaleX", Elastic.easeOut, 1.1, 1, 1, true);				var myTween2:Tween = new Tween(controls.playbutton, "scaleY", Elastic.easeOut, 1.1, 1, 1, true);				controls.playbutton.gotoAndStop(1);			}		}		function onfullscreenrollover(eventObject:MouseEvent) {			controls.myfullscreenbutton.gotoAndStop(10);			var myTween1:Tween = new Tween(controls.myfullscreenbutton, "scaleX", Elastic.easeOut, 1, 1.3, 2, true);			var myTween2:Tween = new Tween(controls.myfullscreenbutton, "scaleY", Elastic.easeOut, 1, 1.3, 2, true);		}		function onfullscreenrollout(eventObject:MouseEvent) {			var myTween1:Tween = new Tween(controls.myfullscreenbutton, "scaleX", Elastic.easeOut, 1.3, 1, 2, true);			var myTween2:Tween = new Tween(controls.myfullscreenbutton, "scaleY", Elastic.easeOut, 1.3, 1, 2, true);			controls.myfullscreenbutton.gotoAndStop(1);		}						function getstepfrompos(pos:Number) {			if (pos >= 0.75) {				return 1;			} else if (pos >= 0.5) {				return 4;			} else if (pos >= 0.25) {				return 8;			} else if (pos > 0.0) {				return 12;			} else {				return 15;			}		}		function onsoundrollover(eventObject:MouseEvent) {			var myColorTransform:ColorTransform = new ColorTransform();			myColorTransform.color = 0x2E9EFB;			controls.mysoundbutton.transform.colorTransform = myColorTransform;		}		function onsoundrollout(eventObject:MouseEvent) {			var myColorTransform:ColorTransform = new ColorTransform();			myColorTransform.color = 0x666666;			controls.mysoundbutton.transform.colorTransform = myColorTransform;						var step = getstepfrompos(ns.soundTransform.volume);			controls.mysoundbutton.gotoAndStop(step);		}		function onsoundmove(eventObject:MouseEvent) {			var pos = (eventObject.localX - 26) / 12;			var step = getstepfrompos(pos);			controls.mysoundbutton.gotoAndStop(step);		}		function onclicksound(eventObject:MouseEvent) {			var pos = (eventObject.localX - 26) / 12;			var newvolume:Number = pos;			var st:SoundTransform = new SoundTransform();			if (newvolume < 0) {				if (ns.soundTransform.volume == 0) {					newvolume = 0.5;				} else {					newvolume = 0;				}			}			st.volume = newvolume;			ns.soundTransform = st;		}		function onmousemove(eventObject:MouseEvent) {			if (!mouseactivity) {				if (controlshidden) {					Mouse.show();					TransitionManager.start(controls, {type:Fade, direction:Transition.IN, duration:1, easing:Strong.easeOut});					TransitionManager.start(linksbutton, {type:Fade, direction:Transition.IN, duration:1, easing:Strong.easeOut});					controlshidden = false;				}			}			mouseactivity = true;		}		/** seeking management when the user clicks on the timeline */		function ontimelineclick(eventObject:MouseEvent) { 			removeErrorMessage();			var posoffset = eventObject.stageX - 40;			var offset = Math.floor((posoffset / (controls.mytimeline.width - 10)) * totalduration);			if (posoffset > (controls.mytimeline.myloadbar.width + controls.mytimeline.myloadbar.x + 176) * 									(controls.mytimeline.width / controls.mytimeline.myloadbarfull.width) || 				posoffset < (controls.mytimeline.myloadbar.x + 176) * (controls.mytimeline.width / controls.mytimeline.myloadbarfull.width)) {				trace("forward seek to " + offset);				if (ishttpstreaming && totalduration > 0) { 					startedSuccessfully = false;					controls.mytimeline.myloadbar.x = (eventObject.localX - 176);					controls.mytimeline.myloadbar.width = 0;					controls.mytimeline.myprogressbar.x = (eventObject.localX - 176);					controls.mytimeline.myprogressbar.width = 0;					ns.play(urlofvideo + "?start=" + offset); // TODO: pourquoi le ?				} else if ((ishostingservice || (isfilestreaming && !(videotimes == null))) && metadatareceived) {					startedSuccessfully = false;					for (var i:Number = 0; i < videotimes.length; i++) {						if (videotimes[i] <= offset && videotimes[i+1] >= offset) {							var newpos = (videotimes[i] / totalduration) * (controls.mytimeline.width - 10);							trace("newpos = " + newpos);							controls.mytimeline.myloadbar.x = eventObject.localX - 176;							controls.mytimeline.myloadbar.width = 0;							controls.mytimeline.myprogressbar.x = eventObject.localX - 176;							controls.mytimeline.myprogressbar.width = 0;							ns.pause();							trace("playing " + urlofvideo + "&startposition=" + videopositions[i]);							ns.play(urlofvideo + "&startposition=" + videopositions[i]);							playstatus = "Play";							controls.playbutton.gotoAndStop(10);							addLoader();							break;						}					}				} else if (isfilestreaming) { // cas où c'est du MP4 					// TODO				}			} else {				ns.seek(offset - timeoffset);			}		}		function metaDataHandler(infoObject:Object):void {			//trace("metadataHandler");			trace(infoObject);			trace(infoObject.duration);			if (!metadatareceived) {				totalduration = infoObject.duration;				controls.mydurationtext.text = "/ " + formattime(infoObject.duration);				if (!(infoObject.keyframes == null)) { 					videotimes = infoObject.keyframes.times;					videopositions = infoObject.keyframes.filepositions;				}				metadatareceived = true;			} else if (ishttpstreaming) {				duration = infoObject.duration;				timeoffset = totalduration - duration;				subtitles.timeoffset = timeoffset;			}		}		function cuePointHandler(infoObject:Object):void {			trace("onCuePoint:");    		for (var propName:String in infoObject) {				if (propName != "parameters") {					trace(propName + " = " + infoObject[propName]);				} else {					trace("parameters =");					if (infoObject.parameters != undefined) {						for (var paramName:String in infoObject.parameters) {							trace(" " + paramName + ": " + infoObject.parameters[paramName]);						}						removeLoader();						if (infoObject.parameters.error != undefined) {							var errorString:String = infoObject.parameters["error"];							ns.pause();							ns.close();							var timeToWait:Number = errorString.split(":")[1];							var s:String = languagestrings.getString(language, 'waitlimit');							var waitString:String = s.replace("{0}", timeToWait);							mybtn = Buttons.createPremiumButton(languagestrings.getString(language, 'limitreached'), waitString);							this.addChild(mybtn);							mybtn.x = stage.width * 0.5 - 150;							mybtn.y = stage.height * 0.3;						}					} 				} 			}		}						/** 		  information boxes events		 */				function onlinksrollover(eventObject:MouseEvent) {			linksbutton.alpha = 1;		}		function onlinksrollout(eventObject:MouseEvent) {			linksbutton.alpha = 0.7;		}		function onclicklinks(eventObject:MouseEvent) {			eventObject.stopPropagation();			if (isfilestreaming) {				var link = "http://127.0.0.1:4001/" + videoid;				mylinksbox.mylinktext.text = link;				mylinksbox.myembedtext.text = '<object width="640" height="360">\n' + 				'<param name="allowFullScreen" value="true" />' + 				'<param name="flashvars" value="file=' + link + '" />' + 				'<param name="wmode" value="direct">' + 				'<param name="movie" value="http://cacaoweb.org/player.swf" />' + 				'<embed src="http://cacaoweb.org/player.swf" flashvars="file=' + link + '" width="640" height="360" ' +				'allowFullScreen="true" wmode="direct" type="application/x-shockwave-flash" />\n' + 				'</object>';			}			mylinksbox.visible = true;			playstatus = "Pause";			ns.pause();			controls.playbutton.gotoAndStop(1);		}		function onclicklinksbox(eventObject:MouseEvent) {			eventObject.stopPropagation();		}		function onclickcopybtn(eventObject:MouseEvent) {			System.setClipboard(mylinksbox.myembedtext.text);			stage.focus = mylinksbox.myembedtext;			mylinksbox.myembedtext.setSelection(0, mylinksbox.myembedtext.length); 		}		function onclicklinktext(eventObject:MouseEvent) {			stage.focus = mylinksbox.mylinktext;			mylinksbox.mylinktext.setSelection(0, mylinksbox.mylinktext.length);					}						/** 		 * Fonctions appelées pour regarder et transmettre l'état de cacaoweb à l'utilisateur		 */				function videotimeouttimer(e:TimerEvent) {			trace("video timeout");			checkvideoTimeoutTimer.stop();			showErrorMessage(languagestrings.getString(language, 'filetimeout'));		}		function cacaowebnotinstalled() {			trace("cacaoweb not running");			removeLoader();			controls.visible = false;			showErrorMessage(languagestrings.getString(language, 'cacaowebnotrunning'));			var dllink = getDownloadlink();			var txtlink = "<a href=\"" + dllink + "\">" + languagestrings.getString(language, 'cacaowebdownload') + "</a>";			mybtn = Buttons.createDownloadButton(txtlink);			this.addChild(mybtn);			mybtn.x = stage.width * 0.5 - 100;			mybtn.y = stage.height * 0.5;		}		function cacaowebinstalledtimer(e:TimerEvent) {			checkcacaowebTimer.stop();			if (!cacaowebinstalled) 				cacaowebnotinstalled()		}		function handleCompleteAdReq(e:Event) { 			if (e.target.data.substr(0, 2) == "OK") {				showingad = true;				e.target.removeEventListener(Event.COMPLETE, handleCompleteAdReq);				e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorAd);				e.target.addEventListener(Event.COMPLETE, function () { e.target.close(); });				e.target.addEventListener(IOErrorEvent.IO_ERROR, function () { e.target.close(); });				e.target.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function () { e.target.close(); });				var url = "http://ads.publicitads.com/?" + e.target.data.substr(2);				e.target.load(new URLRequest(url));				trace("tracking at " + url);				trace("starting ad transaction");				ns.pause();				trace("pausing video for ad");				removeLoader();				removeErrorMessage();				changeNetStream(nsad);				var pos = e.target.data.indexOf("t=");				var token = e.target.data.substr(pos + 2);				nsad.play("http://127.0.0.1:4001/getcacaoad?lang=en&token=" + token); 				nsad.addEventListener(NetStatusEvent.NET_STATUS, adNetStatusHandler); 			} else {				playstatus = "Play";				ns.resume();				controls.playbutton.gotoAndStop(10);				trace("resuming video because no ad available");				if (ns.bufferLength < ns.bufferTime) {					showErrorMessage(languagestrings.getString(language, 'pleasewait'));					addLoader();				}				e.target.close();			}					}  		function handleIOErrorAd(e:Event) {			e.target.close();		}		function handlecacaowebBuytoken(e:Event) { 			if (e.target.data.substr(0, 2) == "OK") {				trace("token bought and stored");				e.target.removeEventListener(Event.COMPLETE, handlecacaowebBuytoken);				e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorcacaowebBuytoken);				e.target.addEventListener(Event.COMPLETE, handleCompleteAdReq);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorAd);				e.target.load(new URLRequest("http://127.0.0.1:4001/reqcacaoad?lang=" + language));							} else {				e.target.close();			}		}  		function handleIOErrorcacaowebBuytoken(e:Event) {			e.target.close();		}		function onclickbuytoken(e:Event) {			removeErrorMessage();			if (mybtn != null && this.contains(mybtn))				this.removeChild(mybtn);			var loader = new URLLoader();			loader.addEventListener(Event.COMPLETE, handlecacaowebBuytoken);			loader.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorcacaowebBuytoken);			loader.load(new URLRequest("http://127.0.0.1:4001/buytoken?f=" + videoid));					}		function handleRestrictedToken(e:Event) { 			trace("restricted file token info received, data is:\n" + e.target.data + "\nend of data\n");			e.target.removeEventListener(Event.COMPLETE, handleRestrictedToken);			e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorRestrictedToken);			var txtlink; // le lien du bouton			if (e.target.data.substr(0, 3) == 'NOS') { // no session				controls.visible = false;				togglepauseplay();				ns.pause();				showErrorMessage(languagestrings.getString(language, 'pleaselogin'));				txtlink = "<a href=\"http://127.0.0.1:4001/admin.html?register\" target=\"_blank\">" + languagestrings.getString(language, 'myaccount') + "</a>";				mybtn = Buttons.createBasicButton(txtlink);				this.addChild(mybtn);				mybtn.x = stage.width * 0.5 - 100;				mybtn.y = stage.height * 0.5;				e.target.close();			} else if (e.target.data.substr(0, 3) == 'NOT') { // no token					/* cas 1: pas assez d'argent => bouton aller sur mon compte					   cas 2: assez d'argent => bouton acheter le contenu */					var arr = e.target.data.split("\n");					var msg; // le message au dessus du bouton					var numberofcredits:Number;					if (arr[1] == 'OK') { // assez d'argent						numberofcredits = arr[2];						if (numberofcredits == 0) {							return;						}												msg = languagestrings.getString(language, 'cost') + numberofcredits + languagestrings.getString(language, 'credits');						txtlink = "<a href=\"javascript:\">" + languagestrings.getString(language, 'buy') + "</a>";						var needtobuy = true;					} else { // pas assez d'argent						numberofcredits = arr[2];						msg = languagestrings.getString(language, 'cost') + numberofcredits + languagestrings.getString(language, 'credits');						msg += '\n' + languagestrings.getString(language, 'notenoughcredits');						txtlink = "<a href=\"http://127.0.0.1:4001/admin.html?buycredits\" target=\"_blank\">" + 							languagestrings.getString(language, 'myaccount') + "</a>";					}					if (previewallowed) { 						msg += '\n' + languagestrings.getString(language, 'watchpreview');					}										togglepauseplay();					showErrorMessage(msg);					mybtn = Buttons.createBasicButton(txtlink);					if (needtobuy) {						mybtn.addEventListener(MouseEvent.CLICK, onclickbuytoken);					}					this.addChild(mybtn);					mybtn.x = stage.width * 0.5 - 100;					mybtn.y = stage.height * 0.5;					e.target.close();			} else if (e.target.data.substr(0, 3) == "TOK") {				trace("i already have a token for this file");				e.target.addEventListener(Event.COMPLETE, handleCompleteAdReq);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorAd);				e.target.load(new URLRequest("http://127.0.0.1:4001/reqcacaoad?lang=" + language));			} else {				e.target.close();			}		}				function handleIOErrorRestrictedToken(e:Event) {			e.target.close();		}		function handleHostStatus(e:Event) {			//trace(e.target.data);			trace("host status received");			e.target.removeEventListener(Event.COMPLETE, handleHostStatus);			e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorHostStatus);			checkvideoTimeoutTimer.stop();			var xml:XMLDocument = new XMLDocument();			xml.ignoreWhite = true;			if (!(e.target.data == "OK")) {				showErrorMessage(e.target.data);				removeLoader();				ns.close();				e.target.close();			} else {				e.target.addEventListener(Event.COMPLETE, handleCompleteAdReq);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorAd);				e.target.load(new URLRequest("http://127.0.0.1:4001/reqcacaoad?lang=" + language));			}		}  		function handleIOErrorHostStatus(e:Event) {			e.target.close();		}		function handleFilestreamingMeta(e:Event) {			trace("filestreaming meta :\n" + e.target.data + "\n");			var arr = e.target.data.split("\n");			videotitle = arr[0];			trace("filestreaming metadata received");			e.target.removeEventListener(Event.COMPLETE, handleFilestreamingMeta);			e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorFilestreamingMeta);			checkvideoTimeoutTimer.stop();			restricted = (arr[1] == 'true');			previewallowed = (arr[2] == 'true');			if (restricted) {				trace("restricted video, previewallowed = " + previewallowed);				trace("requesting for token availability");				e.target.addEventListener(Event.COMPLETE, handleRestrictedToken);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorRestrictedToken);				e.target.load(new URLRequest("http://127.0.0.1:4001/getfiletoken?f=" + videoid));			} else {				trace("video not restricted, requesting for ad");				e.target.addEventListener(Event.COMPLETE, handleCompleteAdReq);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorAd);				e.target.load(new URLRequest("http://127.0.0.1:4001/reqcacaoad?lang=" + language));			}		}  		function handleIOErrorFilestreamingMeta(e:Event) {			e.target.close();		}		function handlecacaowebStatus(e:Event) {			cacaowebinstalled = true;			log("cacaoweb is running");			e.target.removeEventListener(Event.COMPLETE, handlecacaowebStatus);			e.target.removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorcacaowebStatus);			if (ishostingservice) {				e.target.addEventListener(Event.COMPLETE, handleHostStatus);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorHostStatus);				e.target.load(new URLRequest("http://127.0.0.1:4001/linkstatus?contentid=" + videoid + "&provider=" + hostingprovider));				checkvideoTimeoutTimer.start();			} else if (isfilestreaming) {				e.target.addEventListener(Event.COMPLETE, handleFilestreamingMeta);				e.target.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorFilestreamingMeta);				e.target.load(new URLRequest("http://127.0.0.1:4001/fileinfo?f=" + videoid + "&request=meta"));				checkvideoTimeoutTimer.start();			}		}		function handleIOErrorcacaowebStatus(e:Event) {			cacaowebnotinstalled();			e.target.close();		}				function adNetStatusHandler(e:NetStatusEvent) 		{ 			trace("adNetStatusHandler " + e.info.code);			//trace(e);						switch (e.info.code) {				case "NetStream.Play.Stop":					addLoader();					changeNetStream(ns);					ns.resume();					trace("resuming playback because ad is terminated");					playstatus = "Play";					controls.playbutton.gotoAndStop(10);					break;			}		}					function netStatusHandler(e:NetStatusEvent) 		{ 			log("netStatusHandler " + e.info.code);			//trace(e);						switch (e.info.code) {				case "NetStream.Play.StreamNotFound":					if (! (this.contains(myerrormsg))) {						showErrorMessage(languagestrings.getString(language, 'errorStreamNotFound'));						removeLoader();					}					break;									case "NetStream.Play.FileStructureInvalid":					//showErrorMessage(languagestrings.getString(language, 'errorFileStructureInvalid'));					removeLoader();					var sSound:Sound = new Sound();					sSound.load(new URLRequest(urlofvideo));					sSound.play();					break;									case "NetStream.Play.Stop":					if (!statsstopsent && totalduration > 0 && (ns.time + timeoffset) / totalduration > 0.95) {						if (showingad) {							changeNetStream(nsad);							nsad.seek(0);							nsad.resume();							removeLoader();						} /*else {							navigateToURL(new URLRequest("javascript:showFacebookLike();"), "_self");						}*/						statsstopsent = true;						stage.displayState = StageDisplayState.NORMAL;					}					break;									case "NetStream.Play.Start":					if (playstatus == "Play") {						removeErrorMessage();					}					break;									case "NetStream.Buffer.Full":					startedSuccessfully = true;					removeLoader();					if (playstatus == "Play") {						removeErrorMessage();					}					this.addChild(this.controls);					this.addChild(this.linksbutton);					break;									case "NetStream.Buffer.Empty":					addLoader();					if (restricted && totalduration > 0 && ns.time / totalduration > 0.10) {						var loader:URLLoader = new URLLoader();						loader.addEventListener(Event.COMPLETE, handleRestrictedToken);						loader.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorRestrictedToken);						loader.load(new URLRequest("http://127.0.0.1:4001/getfiletoken?f=" + videoid));						// TODO: ne le faire qu'une fois					}					break;								}		}		function startplaying() {						if (urlofvideo.indexOf("/mixture/mixture.caml") > -1 || 				urlofvideo.indexOf("/putlocker/putlocker.caml") > -1 || 				urlofvideo.indexOf("/nowvideo/nowvideo.caml") > -1 || 				urlofvideo.indexOf("/moevideos/moevideos.caml") > -1) {				var arr = urlofvideo.split('/');				var s = arr[arr.length - 1];				ishostingservice = true;				hostingprovider = s.split(".")[0];			} else if (urlofvideo.indexOf("/") > -1) { // TODO: prendre une meilleure condition que ca				isfilestreaming = true;			} else {				ishttpstreaming = true;			}							playstatus = "Play";			metadatareceived = false;						var fullurl = urlofvideo;			if (affiliate != null) {				fullurl += "&affiliate=" + affiliate;			}			if (affiliate1 != null) {				fullurl += "&affiliate1=" + affiliate1;			}			if (affiliate2 != null) {				fullurl += "&affiliate2=" + affiliate2;			}									try {				this.videohandler = new VideoHandler(this.ns, this.myClassicVideo, fullurl);				log("stagevideo successful");			} catch(e:Error) {				log("error with stagevideo");				myClassicVideo.attachNetStream(this.ns);				this.ns.play(fullurl);			}						ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler); 			playbackstarted = true;			controls.playbutton.gotoAndStop(10);					showErrorMessage(languagestrings.getString(language, 'pleasewait'));			addLoader();						videoTimer.addEventListener(TimerEvent.TIMER, videoStatus);			activityTimer.addEventListener(TimerEvent.TIMER, activityStatus);			checkvideoTimeoutTimer.addEventListener(TimerEvent.TIMER, videotimeouttimer);			activityTimer.start();			videoTimer.start();									if ((ishostingservice && urlofvideo.indexOf("videoid=") > -1) || isfilestreaming) { 				var rnd = Math.ceil(Math.random()*10000);												var loader:URLLoader = new URLLoader();				loader.addEventListener(Event.COMPLETE, handlecacaowebStatus);				loader.addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorcacaowebStatus);				loader.load(new URLRequest("http://127.0.0.1:4001/isrunning"));				checkcacaowebTimer.addEventListener(TimerEvent.TIMER, cacaowebinstalledtimer);				checkcacaowebTimer.start();								if (ishostingservice) {					videoid = urlofvideo.substr(urlofvideo.indexOf("videoid=") + 8);					if (videoid.indexOf("v=") > -1) 						videoid = videoid.substr(videoid.indexOf("v=") + 2);				} else if (isfilestreaming) {					if (urlofvideo.indexOf("f=") > -1) {						videoid = urlofvideo.substr(urlofvideo.indexOf("f=") + 2, 32);					} else {						videoid = urlofvideo.substr(urlofvideo.indexOf("/", 10) + 1, 32);					}				}			}		}				function getDownloadlink() {			var os:String = flash.system.Capabilities.os.substr(0, 3);			if (os == "Win") {				return "http://cacaoweb.org/download/cacaoweb.exe";			} else if (os == "Mac") {				return "http://cacaoweb.org/download/cacaoweb.dmg";			} else {				return "http://cacaoweb.org/#download";			}		}				/** functions exposed to the Javascript API		  */		function playbackStatus() {						/* TODO: 4 possibles states, 			- Buffering			- Paused			- Playing			- Stopped */			return "Playing";		}				function playbackDuration() {			return totalduration;		}				function readParameters() {			var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;			if (paramObj["file"] != null) {				urlofvideo = paramObj["file"];				if (paramObj["lang"] != null) { language = paramObj["lang"]; };				if (["en", "fr", "it", "es", "pl"].indexOf(language) == -1) {					language = "en";				}				if (paramObj["dontplay"] == 1) { dontplay = 1; };				affiliate = paramObj["affiliate"];				affiliate1 = paramObj["affiliate1"];				affiliate2 = paramObj["affiliate2"];								//urlofvideo = "http://127.0.0.1:4001/?f=FB56619EB21AB6C0611634E81DF5601F"; // MP4 HD				//urlofvideo = "http://127.0.0.1:4001/?f=DF38715E48B4B255A99DB59C96BC7756"; // MP4 HD				//urlofvideo = "http://127.0.0.1:4001/a5f944bf491b1a05cf4a69fb27ce90c8"; // MP4 HD				//urlofvideo = "http://127.0.0.1:4001/?f=eeea0debf22963cb490c0ead8a1e25a3"; // MP4 				//urlofvideo = "http://127.0.0.1:4001/?f=52fd53af16f35cd48dc473b493716989"; // FLV				//urlofvideo = "http://127.0.0.1:4001/?f=a772fac937e6cd0af9a40f369a3818d1"; // music				//urlofvideo = "http://127.0.0.1:4001/8e37fa512eb94a6054d803dfa6a503e0";				//urlofvideo = "http://76.73.18.50/media/mymedia/Dikkenek.mp4";				//urlofvideo = "http://127.0.0.1:4001/?f=685bee87cb93dd01351889c4fab2a3fe";								//urlofvideo = "http://127.0.0.1:4001/?f=2cfe1cd8d0637f0c3c85cac0b71e1d4e"; // fichier payant				//urlofvideo = "http://127.0.0.1:4001/?f=713d85fc4435a749777418d2f15ffdd8"; // fichier payant				//urlofvideo = "http://www.helpexamples.com/flash/video/cuepoints.flv";								//setSubtitles("http://127.0.0.1:4001/?f=f3190d43f11058d6db0807daf4073944", "en", 0.0);									if (paramObj["subtitlesurl"] != null) {					var suboffset = (paramObj["subtitlesoffset"] == null) ? 0.0 : paramObj["subtitlesoffset"];					currentsubtitleslanguage = (paramObj["subtitleslanguage"] == null) ? language : paramObj["subtitleslanguage"];					trace("subtitles url = " + paramObj["subtitlesurl"] + " ; currentsubtitleslanguage = " + 						  currentsubtitleslanguage + " ; subtitles offset = " + suboffset);					setSubtitles(paramObj["subtitlesurl"], currentsubtitleslanguage, suboffset);				}			}		}								function mainstart() {						/** 			 * Code d'initialisation 			 */			 			controls.mytimelinetext.alpha = 0.8;			controls.mytimeline.myloadbar.width = 0;			controls.mytimeline.myprogressbar.width = 0;			controls.mytimeline.buttonMode = true;			controls.mytimelinetext.visible = false;									linksbutton.alpha = 0.7;						mylinksbox.visible = false;			mylinksbox.mylinktext.text = "";			mylinksbox.myembedtext.text = "";						/*logoLoader = new Loader();			logoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, logoLoaderComplete);			logoLoader.load(new URLRequest("http://127.0.0.1:4001/logo.png"));*/									var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;						language = Capabilities.language.substr(0, 2);			trace("detected language = " + language);								readParameters();										if (urlofvideo != "") {				var dontplay = 0;				if (paramObj["dontplay"] == 1) { dontplay = 1; };				var playstatus = "Pause";				if (dontplay == 0) { 					startplaying();				}			} else {				showErrorMessage(languagestrings.getString(language, 'errorreadingfile'));			}						linksbutton.linkstext.text = languagestrings.getString(language, 'links');			mylinksbox.downloadlabel.text = languagestrings.getString(language, 'downloadlink');			mylinksbox.embedlabel.text = languagestrings.getString(language, 'embedcode');									/** 			   Ajout des évènements correspondants aux boutons de contrôles			 */			 			 			controls.playbutton.addEventListener(MouseEvent.CLICK, onclickplay);			controls.playbutton.addEventListener(MouseEvent.ROLL_OVER, onplayrollover);			controls.playbutton.addEventListener(MouseEvent.ROLL_OUT, onplayrollout);			controls.myfullscreenbutton.addEventListener(MouseEvent.CLICK, onclickfullscreen);			controls.myfullscreenbutton.addEventListener(MouseEvent.ROLL_OVER, onfullscreenrollover);			controls.myfullscreenbutton.addEventListener(MouseEvent.ROLL_OUT, onfullscreenrollout);			controls.mysoundbutton.addEventListener(MouseEvent.CLICK, onclicksound);			controls.mysoundbutton.addEventListener(MouseEvent.ROLL_OVER, onsoundrollover);			controls.mysoundbutton.addEventListener(MouseEvent.ROLL_OUT, onsoundrollout);			controls.mysoundbutton.addEventListener(MouseEvent.MOUSE_MOVE, onsoundmove);			this.stage.addEventListener(MouseEvent.MOUSE_MOVE, onmousemove);			this.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.doubleClickEnabled = true;			stage.addEventListener(MouseEvent.DOUBLE_CLICK, onmousedoubleclick);			stage.addEventListener(MouseEvent.CLICK, onvideomouseclick);			controls.mytimeline.addEventListener(MouseEvent.CLICK, ontimelineclick);			controls.mytimeline.addEventListener(MouseEvent.MOUSE_MOVE, ontimelinemove);			controls.mytimeline.addEventListener(MouseEvent.ROLL_OUT, ontimelinerollout);						linksbutton.addEventListener(MouseEvent.CLICK, onclicklinks);			linksbutton.addEventListener(MouseEvent.ROLL_OVER, onlinksrollover);			linksbutton.addEventListener(MouseEvent.ROLL_OUT, onlinksrollout);						mylinksbox.addEventListener(MouseEvent.CLICK, onclicklinksbox);			mylinksbox.mycopybtn.addEventListener(MouseEvent.CLICK, onclickcopybtn);			mylinksbox.mylinktext.addEventListener(MouseEvent.CLICK, onclicklinktext);								}	}}